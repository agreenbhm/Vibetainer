# .github/workflows/bootstrap-gradle-wrapper.yml
name: Add Gradle Wrapper

on:
  workflow_dispatch:
    inputs:
      gradle_version:
        description: "Gradle version for the wrapper"
        required: false
        default: "8.10.2"
      project_dir:
        description: "Path to Android/Gradle project root (leave blank to auto-detect)"
        required: false
        default: ""
      force_overwrite:
        description: "Overwrite existing wrapper if present?"
        type: boolean
        required: false
        default: false

permissions:
  contents: write

jobs:
  add-wrapper:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Resolve project directory
        id: where
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${{ inputs.project_dir }}" ]]; then
            PD="${{ inputs.project_dir }}"
            [[ -f "$PD/settings.gradle" || -f "$PD/settings.gradle.kts" ]] || { echo "settings.gradle(.kts) not found in $PD"; exit 1; }
          else
            # auto-detect by finding settings.gradle(.kts)
            HIT="$(git ls-files | grep -E '(?:^|/)(settings\.gradle(?:\.kts)?)$' | head -n1 || true)"
            [[ -n "$HIT" ]] || { echo "Unable to auto-detect project root (no settings.gradle[.kts] tracked)"; exit 1; }
            PD="$(dirname "$HIT")"
          fi
          echo "project_dir=$PD" >> "$GITHUB_OUTPUT"
          echo "Project dir: $PD"

      - name: Check existing wrapper
        id: exists
        shell: bash
        run: |
          PD="${{ steps.where.outputs.project_dir }}"
          if [[ -f "$PD/gradlew" && -f "$PD/gradlew.bat" && -d "$PD/gradle/wrapper" ]]; then
            echo "present=true"  >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Stop if wrapper exists (unless force)
        if: ${{ steps.exists.outputs.present == 'true' && inputs.force_overwrite == false }}
        run: |
          echo "Gradle wrapper already present. Re-run with force_overwrite=true to overwrite."
          exit 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Gradle (for running `gradle wrapper`)
        uses: gradle/actions/setup-gradle@v3

      - name: Generate Gradle wrapper
        working-directory: ${{ steps.where.outputs.project_dir }}
        run: |
          gradle wrapper --gradle-version "${{ inputs.gradle_version }}" --distribution-type all
          chmod +x gradlew

      - name: Commit wrapper files
        shell: bash
        run: |
          PD="${{ steps.where.outputs.project_dir }}"
          git add "$PD/gradlew" "$PD/gradlew.bat" "$PD/gradle/wrapper" || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          MSG="ci: add Gradle wrapper ${{
            inputs.gradle_version
          }} in ${PD:-.}"
          git commit -m "$MSG"
          git push